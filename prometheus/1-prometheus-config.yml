apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 30s
      scrape_timeout: 30s
      evaluation_interval: 15s  # Evaluate rules every 15 seconds.

    rule_files:
    - '/etc/prometheus/prometheus.rules'
    - '/etc/prometheus/prometheus.alerts'

    scrape_configs:

    # # Scrape Redis Exporter
    # - job_name: 'redis_exporter'
    #   static_configs:
    #   - targets: ['redis-exporter:9121']
    #
    # # Scrape Prometheus
    # - job_name: 'prometheus'
    #   static_configs:
    #     - targets: ['localhost:9090']

    # # A scrape configuration for running Prometheus on a Kubernetes cluster.
    # # This uses separate scrape configs for cluster components (i.e. API server, node)
    # # and services to allow each to use different authentication configs.
    # #
    # # Kubernetes labels will be added as Prometheus labels on metrics via the
    # # `labelmap` relabeling action.
    #
    # - job_name: 'kubernetes-cluster'
    #
    #   # Default to scraping over https. If required, just disable this or change to
    #   # `http`.
    #   scheme: https
    #
    #   # This TLS & bearer token file config is used to connect to the actual scrape
    #   # endpoints for cluster components. This is separate to discovery auth
    #   # configuration (`in_cluster` below) because discovery & scraping are two
    #   # separate concerns in Prometheus.
    #   tls_config:
    #     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    #     # If your node certificates are self-signed or use a different CA to the
    #     # master CA, then disable certificate verification below. Note that
    #     # certificate verification is an integral part of a secure infrastructure
    #     # so this should only be disabled in a controlled environment. You can
    #     # disable certificate verification by uncommenting the line below.
    #     #
    #     # insecure_skip_verify: true
    #   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    #
    #   kubernetes_sd_configs:
    #   - api_servers:
    #     - 'https://kubernetes.default.svc'
    #     in_cluster: true
    #     role: apiserver
    #
    #   relabel_configs:
    #   - source_labels: [__meta_kubernetes_role]
    #     action: keep
    #     regex: (?:apiserver|node)
    #   - action: labelmap
    #     regex: __meta_kubernetes_node_label_(.+)
    #   - source_labels: [__meta_kubernetes_role]
    #     action: replace
    #     target_label: kubernetes_role
    #
    #
    #
    # - job_name: 'kubernetes-nodes'
    #   scheme: https
    #   tls_config:
    #     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    #     insecure_skip_verify: true
    #   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    #   kubernetes_sd_configs:
    #   - api_servers:
    #     - 'https://kubernetes.default.svc'
    #     in_cluster: true
    #     role: node
    #   # Attach all node labels to the metrics scraped from the components running
    #   # on that node.
    #   relabel_configs:
    #   - action: labelmap
    #     regex: __meta_kubernetes_node_label_(.+)
    #
    # - job_name: 'kubernetes-service-endpoints'
    #   scheme: https
    #   kubernetes_sd_configs:
    #   - api_servers:
    #     - 'https://kubernetes'  # - 'https://kubernetes.default.svc'
    #     in_cluster: true
    #     role: endpoint
    #   relabel_configs:
    #   - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
    #     action: keep
    #     regex: true
    #   - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
    #     action: replace
    #     target_label: __scheme__
    #     regex: (https?)
    #   - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
    #     action: replace
    #     target_label: __metrics_path__
    #     regex: (.+)
    #   - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
    #     action: replace
    #     target_label: __address__
    #     regex: (.+)(?::\d+);(\d+)
    #     replacement: $1:$2
    #   - action: labelmap
    #     regex: __meta_kubernetes_service_label_(.+)
    #   - source_labels: [__meta_kubernetes_service_namespace]
    #     action: replace
    #     target_label: kubernetes_namespace
    #   - source_labels: [__meta_kubernetes_service_name]
    #     action: replace
    #     target_label: kubernetes_name
    #
    # - job_name: 'kubernetes-services'
    #   scheme: https
    #   metrics_path: /probe
    #   params:
    #     module: [http_2xx]
    #   kubernetes_sd_configs:
    #   - api_servers:
    #     - 'https://kubernetes.default.svc'
    #     in_cluster: true
    #     role: service
    #   relabel_configs:
    #   - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
    #     action: keep
    #     regex: true
    #   - source_labels: [__address__]
    #     target_label: __param_target
    #   - target_label: __address__
    #     replacement: blackbox
    #   - source_labels: [__param_target]
    #     target_label: instance
    #   - action: labelmap
    #     regex: __meta_kubernetes_service_label_(.+)
    #   - source_labels: [__meta_kubernetes_service_namespace]
    #     target_label: kubernetes_namespace
    #   - source_labels: [__meta_kubernetes_service_name]
    #     target_label: kubernetes_name
    #
    # - job_name: 'kubernetes-pods'
    #   scheme: https
    #   kubernetes_sd_configs:
    #   - api_servers:
    #     - 'https://kubernetes.default.svc'
    #     in_cluster: true
    #     role: pod
    #   relabel_configs:
    #   - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
    #     action: keep
    #     regex: true
    #   - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
    #     action: replace
    #     target_label: __metrics_path__
    #     regex: (.+)
    #   - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
    #     action: replace
    #     regex: (.+):(?:\d+);(\d+)
    #     replacement: ${1}:${2}
    #     target_label: __address__
    #   - action: labelmap
    #     regex: __meta_kubernetes_pod_label_(.+)
    #   - source_labels: [__meta_kubernetes_pod_namespace]
    #     action: replace
    #     target_label: kubernetes_namespace
    #   - source_labels: [__meta_kubernetes_pod_name]
    #     action: replace
    #     target_label: kubernetes_pod_name


    ###################################################################
    ###################################################################
    ###################################################################

    - job_name: 'kubernetes-cluster'

      # Default to scraping over https. If required, just disable this or change to
      # `http`.
      scheme: https

      # This TLS & bearer token file config is used to connect to the actual scrape
      # endpoints for cluster components. This is separate to discovery auth
      # configuration (`in_cluster` below) because discovery & scraping are two
      # separate concerns in Prometheus.
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        # If your node certificates are self-signed or use a different CA to the
        # master CA, then disable certificate verification below. Note that
        # certificate verification is an integral part of a secure infrastructure
        # so this should only be disabled in a controlled environment. You can
        # disable certificate verification by uncommenting the line below.
        #
        # insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
      - api_servers:
        - 'https://kubernetes.default.svc'
        in_cluster: true
        role: apiserver

      relabel_configs:
      - source_labels: [__meta_kubernetes_role]
        action: keep
        regex: (?:apiserver|node)
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - source_labels: [__meta_kubernetes_role]
        action: replace
        target_label: kubernetes_role

    # Scrape config for service endpoints.
    #
    # The relabeling allows the actual service scrape endpoint to be configured
    # via the following annotations:
    #
    # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
    # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
    # to set this to `https` & most likely set the `tls_config` of the scrape config.
    # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
    # * `prometheus.io/port`: If the metrics are exposed on a different port to the
    # service then set this appropriately.
    - job_name: 'kubernetes-service-endpoints'

      kubernetes_sd_configs:
      - api_servers:
        - 'https://kubernetes.default.svc'
        in_cluster: true
        role: endpoint  # (container, pod, service, endpoint, node, apiserver)

      relabel_configs:
      - source_labels: [__meta_kubernetes_role, __meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: endpoint;true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: (.+)(?::\d+);(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_role]
        action: replace
        target_label: kubernetes_role
      - source_labels: [__meta_kubernetes_service_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name

    # Example scrape config for probing services via the Blackbox Exporter.
    #
    # The relabeling allows the actual service scrape endpoint to be configured
    # via the following annotations:
    #
    # * `prometheus.io/probe`: Only probe services that have a value of `true`
    - job_name: 'kubernetes-services'

      metrics_path: /probe
      params:
        module: [http_2xx]

      kubernetes_sd_configs:
      - api_servers:
        - 'https://kubernetes.default.svc'
        in_cluster: true
        role: service

      relabel_configs:
      - source_labels: [__meta_kubernetes_role, __meta_kubernetes_service_annotation_prometheus_io_probe]
        action: keep
        regex: service;true
      - source_labels: [__address__]
        target_label: __param_target
      - target_label: __address__
        replacement: blackbox
      - source_labels: [__param_target]
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_role]
        target_label: kubernetes_role
      - source_labels: [__meta_kubernetes_service_namespace]
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        target_label: kubernetes_name

    # Example scrape config for pods
    #
    # The relabeling allows the actual pod scrape endpoint to be configured via the
    # following annotations:
    #
    # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
    # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
    - job_name: 'kubernetes-pods'

      kubernetes_sd_configs:
      - api_servers:
        - 'https://kubernetes.default.svc'
        in_cluster: true
        role: pod

      relabel_configs:
      - source_labels: [__meta_kubernetes_role, __meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: pod;true
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: (.+):(?:\d+);(\d+)
        replacement: ${1}:${2}
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_pod_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
  prometheus.rules: |
    job_service:rpc_durations_microseconds_count:avg_rate5m = avg(rate(rpc_durations_microseconds_count[5m])) by (job, service)
  prometheus.alerts: |
    ## alert.rules ##

    # Alerts use this syntax:

    # ALERT <alert name>
    #   IF <expression>
    #   [ FOR <duration> ]
    #   [ LABELS <label set> ]
    #   [ ANNOTATIONS <label set> ]

    # http://www.robustperception.io/reduce-noise-from-disk-space-alerts/
    ALERT DiskWillFillIn4Hours
      IF predict_linear(node_filesystem_free{job='node-exporter'}[1h], 4*3600) < 0
      FOR 5m
      LABELS {
        severity="slack"
      }

    # Alert if CPU is higher than 90% for 5m
    ALERT HighCPU
      IF (100 - (avg(irate(node_cpu{kubernetes_name="node-exporter", mode="idle"}[5m])) BY (instance) *100)) * 100)) > .9
      FOR 5m
      LABELS {
        severity="slack"
      }

    # Alert for any instance that is unreachable for >5 minutes.
    ALERT InstanceDown
      IF up == 0
      FOR 5m
      LABELS { severity = "page" }
      ANNOTATIONS {
        summary = "Instance {{ $labels.instance }} down",
        description = "{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes.",
      }

    # Alert for any instance that have a median request latency >1s.
    ALERT APIHighRequestLatency
      IF api_http_request_latencies_second{quantile="0.5"} > 1
      FOR 1m
      ANNOTATIONS {
        summary = "High request latency on {{ $labels.instance }}",
        description = "{{ $labels.instance }} has a median request latency above 1s (current value: {{ $value }}s)",
      }

    # Alert if any of our node exporters die
    ALERT NodeExporterDown
      IF up{job="node-exporter"} == 0
      FOR 5m
      LABELS { severity = "page" }
      ANNOTATIONS {
        summary = "Instance {{ $labels.instance }} down",
        description = "{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes.",
      }

    # Testing to generate alerts
    ALERT SlowHTTPRequest
      IF http_request_duration_microseconds{job="prometheus",name="prometheus",quantile="0.9"} > 5000
      LABELS { severity = "slack" }
      ANNOTATIONS {
        summary = "Slow HTTP Request",
        description = "Slow HTTP Request",
      }
