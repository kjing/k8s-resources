apiVersion: v1
kind: Service
metadata:
  name: ttp
  labels:
    app: ttp
    tier: frontend
spec:
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  type: LoadBalancer   #LoadBalancer NodePort
  ports:
  - port: 80 # the port that this service should serve on
    targetPort: 8000  # port on container
    protocol: TCP
  selector:
    app: ttp
    tier: frontend
---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: ttp
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  # labels:
    # app: guestbook
    # tier: frontend
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 3
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   app: guestbook
  #   tier: frontend
  template:
    metadata:
      labels:
        app: ttp
        tier: frontend
    spec:
      containers:
      - name: ttp
        # Uncomment below to allocate a tty if ever needed
        # stdin: true
        # tty: true
        image: dstroot/tpg-ttpweb
        # The default pull policy is IfNotPresent which causes the Kubelet to
        # not pull an image if it already exists. If you would like to always
        # force a pull you must set a pull image policy of Always or
        # specify a :latest tag on your image.
        imagePullPolicy: Always
        # command: [ "echo", "SUCCESS" ]
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        # - name: GET_HOSTS_FROM
        #   value: dns
          # If your cluster config does not include a dns service, then to
          # instead access environment variables to find service host
          # info, comment out the 'value: dns' line above, and uncomment the
          # line below.
          # value: env
        - name: NODE_ENV
          value: development
        - name: PORT
          value: "8000"
        - name: SESSION_SECRET
          value: 4113a89a-266d-4a05-b835
        - name: GOOGLE_ANALYTICS
          value: UA-XXXXX-X
        - name: REDIS_URI
          value: redis
        - name: STRIPE_SECRET_KEY
          value: sk_test_2UlgCdveldZMNCpGBeUGL03W
        - name: STRIPE_PUBLIC_KEY
          value: pk_test_wyUzkIoDgYuQ6iXbt7ckxERa
        - name: MSSQL_HOST
          value: yms0wtdqkl.database.windows.net
        - name: MSSQL_PORT
          value: "1433"
        # - name: MSSQL_USER
        #   value: LMP2BOyNldB
        # - name: MSSQL_PASSWORD
        #   value: 27UmwFYefNUe
        - name: MSSQL_DATABASE
          value: OLTP_SYS
        # use secrets
        - name: MSSQL_USER
          valueFrom:
            secretKeyRef:
              name: mssql-secret
              key: username
        - name: MSSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mssql-secret
              key: password
        ports:
        - containerPort: 8000
        # health check
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          timeoutSeconds: 5
      #   volumeMounts:
      #     - name: config-volume
      #       mountPath: /config
      # volumes:
      #   - name: config-volume
      #     configMap:
      #       name: configuration
